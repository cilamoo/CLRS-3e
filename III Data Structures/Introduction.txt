Sets are as fundamental to computer science as they are to mathematics. Whereas
mathematical sets are unchanging, the sets manipulated by algorithms can grow,
shrink, or otherwise change over time. We call such sets dynamic.

1.Elements of a dynamic set
Algorithms may require several different types of operations to be performed on
sets. For example, many algorithms need only the ability to insert elements into,
delete elements from, and test membership in a set. We call a dynamic set that
supports these operations a dictionary

In a typical implementation of a dynamic set, each element is represented by an
object whose attributes can be examined and manipulated if we have a pointer to
the object.

Some kinds of dynamic sets assume that one of the objectâ€™s attributes is an identifying
key.

The object may contain satellite data, which are carried around in
other object attributes but are otherwise unused by the set implementation

2.Operations on dynamic sets
Operations on a dynamic set can be grouped into two categories: queries, which
simply return information about the set, and modifying operations, which change
the set.

SEARCH(S,k)
A query that, given a set S and a key value k, returns a pointer x to an element
in S such that x.key = k, or NIL if no such element belongs to S.

INSERT(S,x)
A modifying operation that augments the set S with the element pointed to
by x. We usually assume that any attributes in element x needed by the set
implementation have already been initialized.

DELETE(S,x)
A modifying operation that, given a pointer x to an element in the set S, removes
x from S. (Note that this operation takes a pointer to an element x, not
a key value.)

MINIMUM(S)
A query on a totally ordered set S that returns a pointer to the element of S
with the smallest key.

MAXIMUM(S)
A query on a totally ordered set S that returns a pointer to the element of S
with the largest key.

SUCCESSOR(S,x)
A query that, given an element x whose key is from a totally ordered set S,
returns a pointer to the next larger element in S, or NIL if x is the maximum
element.

PREDECESSOR(S,x)
A query that, given an element x whose key is from a totally ordered set S,
returns a pointer to the next smaller element in S, or NIL if x is the minimum
element.

For a set on n keys, the normal presumption is that a call to MINIMUM followed 
by n - 1 calls to SUCCESSOR enumerates the elements in the set in sorted order.

3.Overview of Part III

A red-black tree is a balanced search
tree; Chapter 18 in Part V presents another kind of balanced search tree, called a
B-tree
11.4 Open addressing ———— the probe sequence

In open addressing, all elements occupy the hash table itself. That is, each table
entry contains either an element of the dynamic set or NIL

Of course, we could store the linked lists for chaining inside the hash table, in
the otherwise unused hash-table slots (see Exercise 11.2-4), but the advantage of
open addressing is that it avoids pointers altogether. Instead of following pointers,
we compute the sequence of slots to be examined. The extra memory freed by not
storing pointers provides the hash table with a larger number of slots for the same
amount of memory, potentially yielding fewer collisions and faster retrieval.

To perform insertion using open addressing, we successively examine, or probe,
the hash table until we find an empty slot in which to put the key. Instead of being
fixed in the order 0,1,...,m-1 (which requires Θ(n) search time), the sequence
of positions probed depends upon the key being inserted.

HASH-INSERT(T,k)
1 i = 0
2 repeat
3     j = h(k,i)
4     if T[j] == NIL
5         T[j] = k
6     else i = i + 1
7 until i == m
8 return NIL 
9 error “hash table overflow”

HASH-SEARCH(T,k)
1 i = 0
2 repeat
3     j = h(k,i)
4     if T[j] == k
5         return j
6     i = i + 1
7 until T[j] == NIL or i == m
8 return NIL

Deletion from an open-address hash table is difficult. When we delete a key
from slot i , we cannot simply mark that slot as empty by storing NIL in it. If
we did, we might be unable to retrieve any key k during whose insertion we had
probed slot i and found it occupied. We can solve this problem by marking the
slot, storing in it the special value DELETED instead of NIL. We would then modify
the procedure HASH-INSERT to treat such a slot as if it were empty so that we can
insert a new key there. We do not need to modify HASH-SEARCH, since it will pass
over DELETED values while searching. When we use the special value DELETED,
however, search times no longer depend on the load factor α, and for this reason
chaining is more commonly selected as a collision resolution technique when keys
must be deleted.

None of these techniques fulfills the assumption of uniform hashing, however, since 
none of them is capable of generating more than m^2 different probe sequences (instead of the m! that uniform
hashing requires). Double hashing has the greatest number of probe sequences and,
as one might expect, seems to give the best results.

1.Linear probing
h(k,i) = (h'(k)+i) mod m 
Because the initial probe determines the entire probe sequence, there are only m distinct probe sequences.

Linear probing is easy to implement, but it suffers from a problem known as
primary clustering. Long runs of occupied slots build up, increasing the average
search time. Clusters arise because an empty slot preceded by i full slots gets filled
next with probability (i+1)/m. Long runs of occupied slots tend to get longer,
and the average search time increases.

2.Quadratic probing
h(k,i) = (h'(k) + c1·i +c2·i^2) mod m
This method works much better than linear probing, but to make full use of
the hash table, the values of c1, c2, and m are constrained. Problem 11-3 shows
one way to select these parameters. Also, if two keys have the same initial probe
position, then their probe sequences are the same, since h(k1,0) = h(k2,0) implies
h(k1,i) = h(k2,i). This property leads to a milder form of clustering, called
secondary clustering. As in linear probing, the initial probe determines the entire
sequence, and so only m distinct probe sequences are used.

3.Double hashing
h(k,i) = (h1(k) + ih2(k)) mod m 
The value h2(k) must be relatively prime to the hash-table size m for the entire
hash table to be searched. (See Exercise 11.4-4.) A convenient way to ensure this
condition is to let m be a power of 2 and to design h2 so that it always produces an
odd number. Another way is to let m be prime and to design h2 so that it always
returns a positive integer less than m.

When m is prime or a power of 2, double hashing improves over linear or quadratic
probing in that Θ(m^2) probe sequences are used, rather than Θ(m), since
each possible (h1(k),h2(k)) pair yields a distinct probe sequence.

4.Analysis of open-address hashing


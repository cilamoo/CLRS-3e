A B-tree T is a rooted tree (whose root is T.root) having the following properties:
1. Every node x has the following attributes:
    a. x.n, the number of keys currently stored in node x,
    b. the x.n keys themselves, x.key1,x.key2,...,x.keyx.n, stored in nondecreasing
       order, so that x.key1 <= x.key2 <= x.keyx.n,
    c. x.leaf, a boolean value that is TRUE if x is a leaf and FALSE if x is an internal
       node.

2. Each internal node x also contains x.n+1 pointers x.c1, x.c2,...,x.c(x.n+1) to
its children. Leaf nodes have no children, and so their ci attributes are undefined.

3.The keys x.keyi separate the ranges of keys stored in each subtree: if ki is any
key stored in the subtree with root x.ci, then
k1 ≤ x.key1 ≤ k2 ≤ x.key2≤∙∙∙ ≤ x.key(x.n) ≤ k(x.n+1).

4. All leaves have the same depth, which is the tree’s height h.

5. Nodes have lower and upper bounds on the number of keys they can contain.
We express these bounds in terms of a fixed integer t ≥ 2 called the minimum
degree of the B-tree:
    a. Every node other than the root must have at least t - 1 keys. Every internal
    node other than the root thus has at least t children. If the tree is nonempty,
    the root must have at least one key.
   b. Every node may contain at most 2t-1 keys. Therefore, an internal node
     may have at most 2t children. We say that a node is full if it contains exactly
     2t - 1 keys.


The height of a B-tree
The number of disk accesses required for most operations on a B-tree is proportional
to the height of the B-tree

Theorem 18.1
If n ≥ 1, then for any n-key B-tree T of height h and minimum degree t ≥ 2,
   h ≤ logt ((n+1)/2)

Although the height of the tree grows as O(lg n) in both cases (recall that t is a constant),
for B-trees the base of the logarithm can be many times larger. Thus, B-trees save a
factor of about lg t over red-black trees in the number of nodes examined for most
tree operations. Because we usually have to access the disk to examine an arbitrary
node in a tree, B-trees avoid a substantial number of disk accesses.
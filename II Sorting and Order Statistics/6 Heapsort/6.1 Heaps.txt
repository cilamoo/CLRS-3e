In this chapter, we introduce another sorting algorithm: heapsort. Like merge sort,
but unlike insertion sort, heapsort’s running time is O(nlgn). Like insertion sort,
but unlike merge sort, heapsort sorts in place: only a constant number of array
elements are stored outside the input array at any time. Thus, heapsort combines
the better attributes of the two sorting algorithms we have already discussed.

Heapsort also introduces another algorithm design technique: using a data structure,
in this case one we call a “heap”, to manage information. Not only is the heap
data structure useful for heapsort, but it also makes an efficient priority queue. 

The term “heap” was originally coined in the context of heapsort, but it has since
come to refer to “garbage-collected storage,”.

6.1 Heaps
The (binary) heap data structure is an array object that we can view as a
nearly complete binary tree.

A.length, which (as usual) gives the number of elements in the array, and
A.heap-size, which represents how many elements in the heap are stored within
array A.

PARENT(i)
1 return ⌊ i/2 ⌋

LEFT(i)
1 return 2i

RIGHT(i)
1 return 2i + 1

The PARENT procedure can compute  ⌊ i/2 ⌋  by shifting i right one bit position. Good
implementations of heapsort often implement these procedures as “macros” or “inline”
procedures.

In a max-heap, the max-heap property is that for every node i other than the root,
A[PARENT(i)] ≥ A[i]
Thus, the largest element in amax-heap is stored at the root.

the min-heap property is that for every node i other than the root
A[PARENT(i)] ≤ A[i]
The smallest element in a min-heap is at the root.

Viewing a heap as a tree, we define the height of a node in a heap to be the
number of edges on the longest simple downward path from the node to a leaf, and
we define the height of the heap to be the height of its root. Since a heap of n elements
is based on a complete binary tree, its height is Θ(lgn).

the basic operations on heaps run in time at most proportional
to the height of the tree and thus take O(lgn) time.
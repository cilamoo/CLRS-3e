8.2 Counting sort

//输入的范围确定[0,k]
Counting sort assumes that each of the n input elements is an integer in the range
0 to k, for some integer k. When k = O(n), the sort runs in Θ(n) time.

Counting sort determines, for each input element x, the number of elements less
than x. It uses this information to place element x directly into its position in the
output array. 

COUNTING-SORT(A,B,K)
1 let C[0..k] be new array
2 for i = 0 to K
3     C[i] = 0
4 for j = 1 to A.length
5     C[A[j]] = C[A[j]] + 1 
6 // C[i] now contains the number of elements equal to i.
7 for i = 1 to k 
8     C[i] = C[i] + C[i-1]
9 //C[i] now contains the number of elements less than or equal to i .
10 for j = A.length t0 1 
11     B[C[A[j]]] = A[j]
12     C[A[j]] = C[A[j]] - 1 

Thus, the overall time is Θ(n+k). In practice, we usually use counting sort when we have k = O(n), in
which case the running time is Θ(n).

Counting sort beats the lower bound of Ω(nlgn) proved in Section 8.1 because
it is not a comparison sort.

An important property of counting sort is that it is stable: numbers with the same
value appear in the output array in the same order as they do in the input array.

Normally, the property of stability is important only when satellite data are carried around with the element
being sorted. Counting sort’s stability is important for another reason: counting
sort is often used as a subroutine in radix sort.


